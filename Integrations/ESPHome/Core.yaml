substitutions:
  name: apollo-pump-1
  version: "25.7.9.1"
  device_description: ${name} made by Apollo Automation - version ${version}.

esp32:
  board: esp32-c6-devkitm-1
  variant: esp32c6
  flash_size: 4MB
  framework:
    type: esp-idf
    
esphome:
  on_boot:
    - priority: 600
      then:
        - lambda: |-
            id(pump_start_time) = 0;
            id(safety_alert_active) = false;
        - script.execute: pump_safety_check
    # Add late boot phase to ensure components are initialized
    - priority: -100
      then:
        - delay: 1000ms  # Give RMT peripheral and light component more time to initialize
        - script.execute: statusCheck

api:
  services:
    - service: play_buzzer
      variables:
        song_str: string
      then:
        - rtttl.play:
            rtttl: !lambda 'return song_str;'
    - service: run_pump_for_seconds
      variables:
        seconds: int
      then:
        - switch.turn_on: pump_control
        - delay: !lambda 'return seconds * 1000;'
        - switch.turn_off: pump_control
    - service: run_pump_until_full
      then: 
        - script.execute: pumpUntilFull

globals:
  - id: cycleCounter
    type: int
    restore_value: no
    initial_value: '0'
  - id: button_press_timestamp
    restore_value: no
    type: uint32_t
    initial_value: '0'
  - id: pump_start_time
    restore_value: no
    type: uint32_t
    initial_value: '0'
  - id: safety_alert_active
    restore_value: no
    type: bool
    initial_value: 'false'

captive_portal:

web_server:
  port: 80

# Buzzer
output:
  - platform: ledc
    pin: GPIO5
    id: buzzer
rtttl:
 output: buzzer

button:
  - platform: restart
    icon: mdi:power-cycle
    name: "ESP Reboot"

  - platform: factory_reset
    disabled_by_default: True
    name: "Factory Reset ESP"
    id: factory_reset_all
  
  - platform: template
    name: "Run Pump"
    id: run_pump_button
    icon: mdi:pump
    on_press:
      then:
        - switch.turn_on: pump_control
        - delay: !lambda 'return (int)id(pump_run_seconds).state * 1000;'
        - switch.turn_off: pump_control
      
  - platform: template
    name: "Run Pump Until Output Wet"
    id: run_pump_until_out_wet
    icon: mdi:pump
    disabled_by_default: true
    on_press: 
      then:
        script.execute: pumpUntilFull


switch:
  - platform: factory_reset
    id: factory_reset_switch
    internal: true
    icon: mdi:shield-off
  - platform: template
    name: "Hourly Water Check"
    id: hourly_water_check_enabled
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    icon: mdi:water-check
  - platform: template
    name: "Stop Pump When Output Wet"
    id: stop_pump_when_full
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    icon: mdi:water-sync
    entity_category: config
  - platform: template
    name: "Stop Pump When Input Dry"
    id: stop_pump_when_dry
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    icon: mdi:water-sync
    entity_category: config
  - platform: template
    name: "Pump Safety Override"
    id: pump_safety_override
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    icon: mdi:shield-alert-outline
    disabled_by_default: true

  - platform: gpio
    pin: GPIO7
    name: "Pump Control"
    id: pump_control
    entity_category: config
    disabled_by_default: true
    on_turn_on:
      then:
        - if:
            condition:
              or:
                - binary_sensor.is_on: fluid_input_sensor
                - switch.is_off: stop_pump_when_dry
            then:
              - logger.log: "Pump turning on - conditions met"
              - lambda: |-
                  id(pump_start_time) = millis();
                  id(safety_alert_active) = false;
            else:
              - logger.log: "Pump blocked - water conditions not met"
              - rtttl.play: 'error:d=4,o=5,b=200:a,p,a,p,a'
              - switch.turn_off: pump_control
    on_turn_off:
      then:
        - lambda: |-
            id(pump_start_time) = 0;
            id(safety_alert_active) = false;
        - logger.log: "Pump turned off"

binary_sensor:
  - platform: status
    name: Online
    id: ink_ha_connected
  - platform: gpio
    id: reset_button
    pin: 
      number: GPIO9
      inverted: true
      mode:
        input: true
        pullup: true
    on_press:
      then:
        - lambda: |-
            id(button_press_timestamp) = millis();    
    on_release:
      then:
        - lambda: |-
            if (millis() - id(button_press_timestamp) >= 10000) {
              // Remove Wifi
              id(factory_reset_switch).turn_on();
            }
            else {
              // Run pump for set seconds (Task 1.8)
              id(run_pump_timed).execute();
            }
  - platform: gpio
    name: Fluid Input
    id: fluid_input_sensor
    icon: mdi:water
    device_class: moisture
    pin:
      number: GPIO4
      mode:
        input: true
        pullup: true
      inverted: true

  - platform: gpio
    name: Fluid Output
    id: fulid_output_sensor
    icon: mdi:water
    device_class: moisture
    pin:
      number: GPIO14
      mode:
        input: true
        pullup: true
      inverted: true


number:
  - platform: template
    name: "Pump Run Seconds"
    id: pump_run_seconds
    icon: mdi:timer
    optimistic: true
    min_value: 1
    max_value: 120
    step: 1
    initial_value: 10
    unit_of_measurement: "s"
    restore_value: true
    mode: box
  - platform: template
    name: "Max Safe Run Time"
    id: max_safe_run_time
    entity_category: config
    icon: mdi:timer-alert
    optimistic: true
    min_value: 5
    max_value: 600
    step: 10
    initial_value: 180
    unit_of_measurement: "s"
    restore_value: true
    mode: box

sensor:
  - platform: internal_temperature
    name: "ESP Temperature"
    id: sys_esp_temperature
    disabled_by_default: true

  - platform: uptime
    name: Uptime
    id: sys_uptime
    update_interval: 60s

  - platform: wifi_signal
    name: RSSI
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

light:
  - platform: esp32_rmt_led_strip
    id: rgb_light
    name: "RGB Light"
    pin: GPIO3
    default_transition_length: 0s
    chipset: WS2812
    num_leds: 1
    rgb_order: grb
    # Add explicit power supply limit to prevent current spikes
    max_refresh_rate: 20ms
    effects:
      - pulse:
          name: "Slow Pulse"
          transition_length: 1000ms
          update_interval: 1000ms
          min_brightness: 0%
          max_brightness: 100%
      - pulse:
          name: "Fast Pulse"
          transition_length: 100ms
          update_interval: 100ms
          min_brightness: 50%
          max_brightness: 100%

script:
  - id: pumpUntilFull
    then:
      - switch.turn_on: stop_pump_when_full
      - delay: 100ms  # Small delay to ensure switch state is updated
      - switch.turn_on: pump_control
      
  - id: statusCheck
    then:
      - if:
          condition:
            - lambda: 'return id(ink_ha_connected).state;'
          then:
            - logger.log: "Apollo Automation: Connected To HA"
            - light.turn_on: 
                id: rgb_light
                brightness: 100%
                red: 0%
                green: 0%
                blue: 100%
          else:
            - if:
                condition:
                  - wifi.connected
                then:
                  - logger.log: "Apollo Automation: Connected To Wifi"
                  - light.turn_on: 
                      id: rgb_light
                      brightness: 100%
                      red: 0%
                      green: 100%
                      blue: 0%
                else:
                  - logger.log: "Apollo Automation: Not Connected To Wifi"
                  - light.turn_on: 
                      id: rgb_light
                      brightness: 100%
                      red: 100%
                      green: 100%
                      blue: 0%
      - delay: 5s
      - light.turn_off: rgb_light
  - id: run_pump_timed
    then:
      - switch.turn_on: pump_control
      - delay: !lambda 'return (int)id(pump_run_seconds).state * 1000;'
      - switch.turn_off: pump_control
  - id: pump_safety_check
    mode: restart
    then:
      - while:
          condition:
            - switch.is_on: pump_control
          then:
            - if:
                condition:
                  - and:
                      - switch.is_on: stop_pump_when_full
                      - binary_sensor.is_on: fulid_output_sensor
                then:
                  - logger.log: "Pump stopping - tank full"
                  - switch.turn_off: pump_control
                  - rtttl.play: 'complete:d=4,o=5,b=160:c,e,g,c6'
            - if:
                condition:
                  - lambda: |-
                      if (id(pump_start_time) == 0) return false;
                      uint32_t runtime = (millis() - id(pump_start_time)) / 1000;
                      return runtime > id(max_safe_run_time).state && !id(pump_safety_override).state;
                then:
                  - logger.log: "Pump stopping - safety"
                  - switch.turn_off: pump_control
            - if:
                condition:
                  - and:
                      - switch.is_on: stop_pump_when_dry
                      - binary_sensor.is_on: fluid_input_sensor
                then:
                  - logger.log: "Pump stopping - input dry"
                  - switch.turn_off: pump_control
            - delay: 1s
  - id: water_level_check
    then:
      - if:
          condition:
            - switch.is_on: hourly_water_check_enabled
          then:
            - if:
                condition:
                  - binary_sensor.is_off: fluid_input_sensor
                then:
                  - logger.log: "Water level check: No water detected - chirping buzzer"
                  - rtttl.play: 'chirp:d=16,o=6,b=200:c,p,c,p,c'

interval:
  - interval: 1h
    then:
      - script.execute: water_level_check